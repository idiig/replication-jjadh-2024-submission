formatC(mean * 100, format = "f", digits = 1),
"*'%'*~(italic(N)==",
n,
"*';'*~italic(std.)==",
formatC(sd, format = "f", digits = 3),
")"
)
)|>
select(annotation) |>
pull()
data |>
arrange(Policy, Translator) |>
ggplot(
aes(
x = AdditionRate,
y = Translator,
fill = Policy,
)
) +
stat_density_ridges(
quantile_lines = TRUE,
quantiles = c(0.025, 0.5, 0.975),
jittered_points = TRUE,
position = "raincloud",
vline_width = 1, vline_color = "red",
point_size = 0.001,
point_alpha = 0.1,
alpha = 0.5,
scale = 1,
) +
scale_fill_brewer(palette = "Blues") +
scale_x_continuous(breaks = c(0.3, 0.6, 0.9)) +
scale_y_discrete(labels = translator_labels) +
geom_hline(
yintercept = c("matsuda", "ozawa", "okumura", "kaneko"),
linetype = "solid",
color = "black",
linewidth = 1.5
) +
annotate(
geom="text",
x = -0.2, y = c("komachiya", "kyusojin", "takeoka", "katagiri"),
color = "blue",
vjust = -0.1,
hjust = 0,
size = 6,
label = c(
"Others",
"Readability",
"Intension",
"Text"
)
) +
annotate(
geom="text",
x = -0.2, y = c("komachiya", "kyusojin", "takeoka", "katagiri"),
color = "blue",
vjust = 1.3,
hjust = 0,
size = 3,
label = by_policy_annotation,
parse = TRUE
) +
annotate(
geom="text",
x = 1.5, y = c(levels(data$Translator)),
color = "black",
vjust = -0.4,
hjust = 1,
size = 3,
label = by_translator_annotation,
parse = TRUE
) +
xlab("Addition Rate") +
labs(
fill = "Policy"
) +
theme_set_b() +
theme(
axis.text.x = element_text(
angle = 0,
hjust = 1,
vjust = 0.5
),
axis.text.y = element_text(
face = "italic"
),
axis.title.y = element_blank()
)
translator_labels <- c(
"kaneko" = "KNK",
"kubota" = "KBT",
"katagiri" = "KTGR",
"okumura" = "OKMR",
"takeoka" = "TKOK",
"ozawa" = "OZW",
"kyusojin" = "KSJ",
"matsuda" = "MTD",
"kojimaarai" = "K&A",
"komachiya" = "KMCY"
)
library(fitdistrplus)
data |>
select(AnnotationRate) |>
unlist() |>
descdist(discrete = FALSE, boot = 1000)
data |>
select(AdditionRate) |>
unlist() |>
descdist(discrete = FALSE, boot = 1000)
data |>
select(AdditionRate) |>
unlist() |>
descdist(discrete = FALSE, boot = 1000)
data |>
select(AdditionRate)
data |>
dplyr::select(AdditionRate) |>
unlist() |>
descdist(discrete = FALSE, boot = 1000)
data |> select(AdditionRate) |> max()
#| label: libraries
#| message: false
library(fitdistrplus)
library(tidyverse)
library(knitr)
library(rstatix)
library(ggplot2)
library(ggpubr)
library(ggridges)
data |> select(AdditionRate) |> max()
data |> select(AdditionRate) |> max()
data |> dplyr::select(AdditionRate) |> max()
library(brms)
#| label: beta-model
#| cache: true
library(brms)
# backend
options(
mc.cores = parallel::detectCores(),
brms.backend = "cmdstanr"
)
# Global setting
chains <- 4
iter <- 4000
warmup <- 1000
bayes_seed <- 1234
# Model
model <- data %>%
brm(
data = .,
formula = AdditionRate ~ Policy + (1 | Translator) + (1 | Poem),
family = Beta(),
prior = c(
prior(normal(0, 1), class = "b"),             # fixed effect
prior(normal(0, 1), class = "Intercept"),     # intercept
prior(cauchy(0, 1), class = "sd"),            # random effect sd
prior(cauchy(0, 1), class = "sigma")          # fi for beta dist
),
chains = chains,
iter = iter,
warmup = warmup,
seed = bayes_seed,
adapt_delta = 0.9,
silent = 2,
control = list(max_treedepth = 12)
)
# Model
model <- data %>%
brm(
data = .,
formula = AdditionRate ~ Policy + (1 | Translator) + (1 | PoemID),
family = Beta(),
prior = c(
prior(normal(0, 1), class = "b"),             # fixed effect
prior(normal(0, 1), class = "Intercept"),     # intercept
prior(cauchy(0, 1), class = "sd"),            # random effect sd
prior(cauchy(0, 1), class = "sigma")          # fi for beta dist
),
chains = chains,
iter = iter,
warmup = warmup,
seed = bayes_seed,
adapt_delta = 0.9,
silent = 2,
control = list(max_treedepth = 12)
)
# Model
model <- data %>%
brm(
data = .,
formula = AdditionRate ~ Policy + (1 | Translator) + (1 | PoemID),
family = Beta(),
prior = c(
prior(normal(0, 1), class = "b"),             # fixed effect
prior(normal(0, 1), class = "Intercept"),     # intercept
prior(cauchy(0, 1), class = "sd"),            # random effect sd
# prior(cauchy(0, 1), class = "sigma")          # fi for beta dist
),
chains = chains,
iter = iter,
warmup = warmup,
seed = bayes_seed,
adapt_delta = 0.9,
silent = 2,
control = list(max_treedepth = 12)
)
# Model
model <- data %>%
brm(
data = .,
formula = AdditionRate ~ Policy + (1 | Translator) + (1 | PoemID),
family = Beta(),
prior = c(
prior(normal(0, 1), class = "b"),             # fixed effect
prior(normal(0, 1), class = "Intercept"),     # intercept
prior(cauchy(0, 1), class = "sd")            # random effect sd
# prior(cauchy(0, 1), class = "sigma")          # fi for beta dist
),
chains = chains,
iter = iter,
warmup = warmup,
seed = bayes_seed,
adapt_delta = 0.9,
silent = 2,
control = list(max_treedepth = 12)
)
#| label: libraries
#| message: false
library(fitdistrplus)
library(tidyverse)
library(knitr)
library(rstatix)
library(ggplot2)
library(ggpubr)
library(ggridges)
#| label: themes
theme_set_b <- function() {
theme_void() +
theme(
strip.background = element_rect(
color = "white",
fill = "white"
),
panel.grid.major.y = element_line(
color = "gray80",
linetype = "solid"
),
strip.text = element_text(
color = "black",
size = rel(1),
angle = 90,
vjust = 0.5,
hjust = 1
),
axis.text.y = element_text(
color = "black",
hjust = 0
),
strip.text.y.left = element_text(
angle = 180
),
axis.title.x = element_text(
size = rel(1.3)
),
axis.title.y = element_text(
size = rel(1.3),
angle = 90,
vjust = 0.5
),
legend.position = "bottom",
legend.title = element_text(
size = rel(1),
face = "bold"
)
)
}
#| label: data-process
data <- read.csv("artifacts/data.csv") |>
mutate(
AdditionRate = ctU + ctD,
Translator = as.factor(Translator),
Policy = case_when(
Translator %in% c(
"kaneko",
"kubota",
"katagiri"
) ~ "Text-orientated",
Translator %in% c(
"okumura",
"takeoka"
) ~ "Intension-orientated",
Translator %in% c(
"ozawa",
"kyusojin"
) ~ "Readability-orientated",
Translator %in% c(
"matsuda",
"kojimaarai",
"komachiya"
) ~ "Others",
),
Policy = factor(
Policy,
levels = c(
"Text-orientated",
"Intension-orientated",
"Readability-orientated",
"Others"
)
),
Translator = factor(
Translator,
levels = c(
"kaneko",
"kubota",
"katagiri",
"okumura",
"takeoka",
"ozawa",
"kyusojin",
"matsuda",
"kojimaarai",
"komachiya"
)
)
) |>
select(
Translator,
PoemID,
Policy,
AdditionRate
)
translator_labels <- c(
"kaneko" = "KNK",
"kubota" = "KBT",
"katagiri" = "KTGR",
"okumura" = "OKMR",
"takeoka" = "TKOK",
"ozawa" = "OZW",
"kyusojin" = "KSJ",
"matsuda" = "MTD",
"kojimaarai" = "K&A",
"komachiya" = "KMCY"
)
#| label: fig-data
#| fig-scap: 追加率の確率分布
#| fig-cap: 追加率の確率分布：
#| fig-subcap:
#|   - "訳者別の追加率の確率分布"
#|   - "Cullen & Frey Graph"
#| messge: false
#| laylayout-nrow: 2
##| layout: [[61, 27]]
by_policy_annotation <- data |> group_by(Policy) |>
get_summary_stats(
AdditionRate,
type = "mean_sd"
) |>
mutate(
annotation = paste0(
formatC(mean * 100, format = "f", digits = 1),
"*'%'*~(italic(N)==",
n,
"*';'*~italic(std.)==",
formatC(sd, format = "f", digits = 3),
")"
)
)|>
select(annotation) |>
pull()
by_translator_annotation <- data |> group_by(Translator) |>
get_summary_stats(
AdditionRate,
type = "mean_sd"
) |>
mutate(
annotation = paste0(
formatC(mean * 100, format = "f", digits = 1),
"*'%'*~(italic(N)==",
n,
"*';'*~italic(std.)==",
formatC(sd, format = "f", digits = 3),
")"
)
)|>
select(annotation) |>
pull()
data |>
arrange(Policy, Translator) |>
ggplot(
aes(
x = AdditionRate,
y = Translator,
fill = Policy,
)
) +
stat_density_ridges(
color = "red",
quantile_lines = TRUE,
quantiles = c(0.025, 0.5, 0.975),
jittered_points = TRUE,
position = "raincloud",
vline_width = 1, vline_color = "red",
point_size = 0.001,
point_alpha = 0.1,
point_color = "black",
alpha = 0.5,
scale = 1,
) +
scale_fill_brewer(palette = "Blues") +
scale_x_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1)) +
scale_y_discrete(labels = translator_labels) +
geom_hline(
yintercept = c("matsuda", "ozawa", "okumura", "kaneko"),
linetype = "solid",
color = "black",
linewidth = 1.5
) +
annotate(
geom="text",
x = -0.2, y = c("kojimaarai", "kyusojin", "takeoka", "katagiri"),
color = "blue",
vjust = -0.2,
hjust = 0,
size = 6,
label = c(
"Others",
"Readability",
"Intension",
"Text"
)
) +
annotate(
geom="text",
x = -0.2, y = c("kojimaarai", "kyusojin", "takeoka", "katagiri"),
color = "blue",
vjust = 1.2,
hjust = 0,
size = 3,
label = by_policy_annotation,
parse = TRUE
) +
annotate(
geom="text",
x = 1.5, y = c(levels(data$Translator)),
color = "black",
vjust = -0.2,
hjust = 1,
size = 3,
label = by_translator_annotation,
parse = TRUE
) +
xlab("Addition Rate") +
labs(
fill = "Translation policy: "
) +
theme_set_b() +
theme(
axis.text.x = element_text(
angle = 0,
hjust = 1,
vjust = 0.5
),
axis.text.y = element_text(
face = "italic"
),
legend.title = element_text(size = 12),
axis.title.y = element_blank()
) +
guides(fill = guide_legend(nrow = 2))
data |>
dplyr::select(AdditionRate) |>
unlist() |>
descdist(
discrete = FALSE,
boot = 1000,
print = FALSE,
)
#| label: beta-model
#| cache: true
library(brms)
# backend
options(
mc.cores = parallel::detectCores(),
brms.backend = "cmdstanr"
)
# Global setting
chains <- 4
iter <- 4000
warmup <- 1000
bayes_seed <- 1234
# Model
model <- data %>%
brm(
data = .,
formula = AdditionRate ~ Policy + (1 | Translator) + (1 | PoemID),
family = Beta(),
prior = c(
prior(normal(0, 1), class = "b"),             # fixed effect
prior(normal(0, 1), class = "Intercept"),     # intercept
prior(cauchy(0, 1), class = "sd")            # random effect sd
# prior(cauchy(0, 1), class = "sigma")          # fi for beta dist
),
chains = chains,
iter = iter,
warmup = warmup,
seed = bayes_seed,
adapt_delta = 0.9,
silent = 2,
control = list(max_treedepth = 12)
)
